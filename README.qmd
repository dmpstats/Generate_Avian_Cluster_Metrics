---
format: gfm
editor: source
---

# Generate Avian Cluster Metrics

MoveApps

Github repository: https://github.com/dmpstats/Generate_Avian_Cluster_Metrics

## Description
Generates cluster metrics from cluster-annotated locations data obtained from an
upstream clustering App. Returns cluster properties summarized at
track-per-cluster and/or whole-cluster levels.


## Documentation

This App calculates a range of metrics for clusters of animal locations grouped
based on spatio-temporal proximity. It is designed to be used with tracking data
that has been processed through a spatial clustering App, requiring track
locations to be labelled with cluster IDs.

Outputted metrics describe various cluster attributes including cluster
timespan, daily and compounded attendance levels, summaries of behavioural
activities within the cluster (if input data includes annotations of animal
behaviour), frequency and duration of cluster visits, and information on first
arrivals and night-time travelled distances to the cluster. Calculations are
performed at both track-per-cluster and whole-cluster levels. A detailed
description of the cluster metrics generated at each aggregation level is
provided below in Section [Cluster Metrics](#cluster-metrics).

In practice, cluster attributes generated by this App can play a pivotal role on
inferring points of interest for ground patrolling purposes and guiding response
actions in animal protection efforts.



### MoveApps Worflow Dependencies

This App relies on the following prerequisites:

- Ensure the prior deployment of the App [Add Local and Solar Time](https://www.moveapps.org/apps/browser/43272925-cd24-466f-bcb9-844a09f1806b)
([GitHub](https://github.com/movestore/Convert-Times)) in the workflow, selecting the binding of local, sunset and sunrise times.

- The input data must contain a column providing cluster annotations for location points. Use Apps like [Avian Cluster Detection](https://www.moveapps.org/apps/browser/81f41b8f-0403-4e9f-bc48-5a064e1060a2) ([GitHub](https://github.com/dmpstats/Avian_Cluster_Detection)) earlier in the 
workflow to detect and identify spatial clusters from tracking data].

- Optionally, the App can produce behavioural-related cluster metrics if the input data includes the required information.  Use Apps such as [Behavioural Classification 
for Vultures](https://www.moveapps.org/apps/browser/44bb2ffa-7d40-4fad-bff5-1269995ba1a2) ([GitHub](https://github.com/dmpstats/Behavioural_Classification_for_Vultures)) earlier in the workflow to derive and bind behavioural categories to the input data.



### Input data

A `move2::move2_loc` object.

### Output data

A `move2::move2_loc` object. The format of the output dataset can be either cluster-based tables or retain the same structure as the input data (i.e. by track location event). See the [Settings](#settings) section below for further details.


### Artefacts

None


### Settings 

**Cluster ID Column** (`cluster_id_col`): character string, the name of the column in the input data indicating the cluster IDs of location points. Default: `"clust_id"`.

**Behaviour Category Column** (`behav_col`): character string, the name of the column in the input data indicating the behavioural categories of location points. Setting this to `NULL` will skip the derivation of behavioural-related cluster metrics. Default: `"behav"`.


**Output Type** (`output_type`): Choose the data format for outputting derived cluster metrics. Two options available:

  1. As a compact cluster-based dataset (`"cluster-based"`, default) - see setting **Cluster-based Output Content** for additional options.
  2. Merge [whole-cluster](#whole-cluster-level) metrics to track location points provided in the input data (`"merge-to-locs"`). Note that non-clustered location points are not carried forward. This option must be selected if using the 'EarthRanger Integration' App as a downstream App.


**Cluster-based Output Content** (`cluster_tbl_type`): If **Output Type** is set to `"cluster-based"`, choose the content of the output dataset:

  1. Metrics at both [track-per-cluster](#track-per-cluster-level) and [whole-cluster](#whole-cluster-level) levels (`"track-and-whole"`, default)
  2. Solely [whole-cluster](#whole-cluster-level) level metrics (`"whole-only"`)



### Most common errors

The app will halt processing an throw an error under the following conditions:

- Failing to deploy the App 'Add Local and Solar Time' earlier in the workflow, as several of the calculated metrics rely on the presence of additional time-related columns in the input data.

- Specifying a **Cluster ID Column** or a **Behaviour Category Column** that is not included in the input data.




### Null or error handling

- **Behaviour Category Column**: if no column name is given (`NULL`), the app will not attempt to produce behavioural-based cluster metrics.



### Cluster Metrics

This section provides a detailed description of the cluster metrics generated in
this App, including how each attribute is calculated.

```{r preamble}
#| include: false
#| echo: false
#| message: false

library(move2)
library(httr2)
library(purrr)
library(readr)

# Helpers
source("tests/app-testing-helpers.r")

# get App secret key for decrypting test dataset
app_key <- get_app_key()

# Read (encrypted) input datasets for testing
wcs <- httr2::secret_read_rds("data/raw/vult_test_data.rds", key = I(app_key)) |> 
  purrr::pluck("wcs")

set_interactive_app_testing()

out <- rFunction(data = wcs |> slice(1:100))

track_clust_tbl_names <- out |> 
  as_tibble() |> 
  dplyr::select(-c(clust_id, individual_name_deployment_id)) |> 
  names()

clust_tbl_names <- mt_track_data(out) |> 
  select(-clust_id) |> 
  names()
```

#### Track-per-Cluster Level

The attributes listed below denote column names of a dataset where each row represents a subset of track location points spatially grouped into a cluster event. Track ID is extracted using the function `move2::mt_track_id_column()`, while cluster ID is specified by the App parameter `cluster_id_col`. This dataset constitutes the events table of the `move2_loc` output object when the App settings `output_type` is set to `"cluster-based"` and `cluster_tbl_type` is defined to `"track-and-whole"`.

```{r}
#| include: false
#| echo: false

track_clust_details <- list(
  "`all_points`" = tibble(
    Description = "A `MULTIPOINT` geometry feature providing track location points in the cluster",
    Calculation = "Spatial combination of track-level `POINT` geometries per cluster"
  ),
  "`median_point`" = tibble(
    Description = "A `POINT` geometry locating the spatial median of track location points in the cluster",
    Calculation = "Geometric median obtained via the Weiszfeld algorithm ([`Gmedian::Weiszfeld`](https://rdrr.io/cran/Gmedian/man/Gmedian.html))"
  ),
  "`pts_n`" = tibble(
    Description = "The number of track location points in the cluster",
    Calculation = "Count number of track points in cluster"
  ),
  "`pts_night_n` and `pts_day_n`" = tibble(
    Description = "The number of night-time and day-time track location points in the cluster",
    Calculation = "Count track points in cluster grouped by column `nightpoint`[^1]"
  ),
  "`first_dttm` and `first_dttm_local`" = tibble(
    Description = "Timestamp of the first track point in the cluster, in UTC and local timezone, respectively",
    Calculation = "Find the track's earliest recorded locations in the cluster"
  ),
  "`last_dttm` and `last_dttm_local`" = tibble(
    Description = "Timestamp of the last track point in the cluster, in UTC and local timezone, respectively",
    Calculation = "Find the track's latest recorded locations in the cluster"
  ),
  "`timespan`" = tibble(
    Description = "Total duration, in hours, over which the track visits the cluster, including periods where the track is absent from the cluster.",
    Calculation = "The time difference between `first_dttm` and `last_dttm`"
  ),
  "`timespan_ndays`" = tibble(
    Description = "Total number of integer days over which the track visits the cluster, including lags during which the track is absent from the cluster",
    Calculation = "The length of the sequence between the date components of `first_dttm_local` and `last_dttm_local`"
  ),
  "`days_present_n`" = tibble(
    Description = "The cumulative number of days on which the track was present in the cluster",
    Calculation = "The length of unique dates on which the track was assigned to the cluster"
  ),
  "`days_absent_n`" = tibble(
    Description = "The cumulative number of days where the track was absent from the cluster, having later revisited",
    Calculation = "The difference between `timespan_ndays` and `days_present_n`"
  ),
    "`hour_local_med`" = tibble(
    Description = "The median local hour of track locations in the cluster",
    Calculation = "Filter the local hour component of all track locations in cluster and calculate the median"
  ),
    "`attnd`" = tibble(
    Description = "The track's total time spent at the cluster (units: hours)",
    Calculation = "Sum over time lags between consecutive track location points within the cluster"
  ),
  "`attnd_dmean`" = tibble(
    Description = "The track's daily mean attendance time at the cluster (unit: hours)",
    Calculation = "Compute the time spent by the track in the cluster per day (excluding absent days), and compute the mean across visited days."
  ),
  "`attnd_daytime_dmean`" = tibble(
    Description = "The track's daily mean attendance time at the cluster during daytime, i.e. the period between sunset and sunrise (unit: hours)",
    Calculation = "Identical to `attnd_dmean`, but including only location events where `nightpoint == 0`"
  ),
  "`attnd_<behaviour-category>` [e.g. `attnd_SFeeding`, `attnd_SResting`, `attnd_SRoosting`]" = tibble(
    Description = "The time spent by the track in each behavioural category while visiting the cluster (unit: hours)",
    Calculation = "For each attributed behavioural class, sum over time lags between track points annotated with the cluster ID"
  ),
  "`visits_day_mean`" = tibble(
    Description = "The track's mean number of unique visits per day to the cluster",
    Calculation = "Run length calculations are applied to the track location points to quantify the number of cluster visits per day (excluding absent days), which are then averaged across all visited days."
  ),
  "`visit_drtn_mean`" = tibble(
    Description = "The mean duration of the track's visits to the cluster (units: hours)",
    Calculation = "Track revisits to the cluster are identified via run lengths, from which visit durations are calculated and the mean across visits is taken."
  ),
  "`nightpts_dist_dmean`" = tibble(
    Description = "The track's daily mean distance between night-time location points and the cluster's centroid (unit: meters)", 
    Calculation = "For each date the track visits the cluster, calculate the median distance between all night-time location points occurred on that date (regardless of cluster affiliation status) and the cluster centroid. Median distances are then averaged over all days to produce this metric[^2]."
  ),
  "`nightpts_250m_prop` and `nightpts_1km_prop`" = tibble(
    Description = "Mean proportion of all night-time track location points within, respectively, 250m and 1km from the cluster centroid, on a daily basis",
    Calculation = "Using the same distances calculated for `nightpts_dist_dmean`, get the proportions of night points located within the considered proximity distances per day, before taking the mean across all visited days"
  ),
  "`arrival_dist_mean`" = tibble(
    Description = "The mean distance between track's night-points and the centroid of the cluster on the date of arrival (i.e. first visit; unit: meters)",
    Calculation = "Filter night-time location points spanning the date of the first visit to the cluster, and compute the mean distance to the cluster's centroid[^3]."
  ),
  "`var_acc_<xyz>_med` and `var_acc_<xyz>_sd`" = tibble(
    Description = "Median and standard deviation, respectively, of Accelerometer variance across track location points within the cluster, for each active accelerometer axis (`x`, `y` and/or `z`). Only calculated when accelerometer data is available.",
    Calculation = "Median and SD of ACC variances on track points annotated with each cluster ID"
  )
)


write_rds(track_clust_details, "doc/track_clust_details.rds")

```

[^1]: If the `nightpoint` column is not present in the input data, it will derived internally based on `sunrise_timestamp` and `sunset_timestamp` columns. These columns are prerequisites that must be added using the 'Add Local and Solar Time' App.

[^2]: In the absence of night-point locations for a given date for the track forming/visiting the cluster, take the track's first point of the next day to calculate the intended night-time distance. Beware: NAs can still occur when there is no next day data available for the track.

[^3]: In the absence of night-point locations on the date of arrival of the track forming/visiting the cluster, take the track's last point of the previous day to calculate the intended arrival distance. Beware: NAs can still occur when there is no track data on the previous day.

  
  

```{r}
#| echo: false

list_rbind(track_clust_details, names_to = "Attribute Name") |> 
  knitr::kable(digits = 1) 
  #kableExtra::kable_styling(font_size = 7)
```



```{r}
#| include: false
#| echo: false

# cross-checking if output colnames match those in output description table
track_clust_details_names <- names(track_clust_details) %>%
  .[!stringr::str_detect(., "var_acc_<xyz>")] |> 
  stringr::str_remove_all("`") |> 
  stringr::str_remove("attnd_<behaviour-category> \\[e.g. ") |>
  stringr::str_remove("\\]") |> 
  stringr::str_split(" and |, ") |> 
  as_vector()


symdiff(track_clust_tbl_names, track_clust_details_names)

```



#### Whole-Cluster Level

Attributes listed in the table below correspond to column names in the whole-cluster metrics dataset generated by the App. Each row represents the properties of a cluster event, which may include one or multiple tracks at any point during the cluster's lifetime. Cluster IDs are provided in the input data column specified by the `cluster_id_col` parameter. How these metrics appear in the App’s output is determined by the `output_type` and `cluster_tbl_type` settings:

  - if `output_type` is set to `"cluster-based"`, whole-cluster metrics are provided as a dedicated table, with its placement in the `move2_loc` output object determined by the `cluster_tbl_type` setting:
    
      - if `cluster_tbl_type = "track-and-whole"` (default), metrics are provided as the track table
      - if `cluster_tbl_type = "whole-only"`, metrics are outputted as the events table 

  - if `output_type` is set to `"merge-to-locs"`, then whole-metrics are included alongside track locations, with repeated metric values for location points associated with a common cluster ID. 

::: {.callout-important}
  When `output_type` is set to `"merge-to-locs"`, a prefix "`cl_`" is added to the names of all cluster-level properties to distinguish them from track location attributes.
:::


```{r}
#| include: false
#| echo: false

clust_details <- list(
  "`spawn_dttm` and `spawn_dttm_local`" = tibble(
    Description = "The 'spawning' date-time of the cluster event, in UTC and local timezone, respectively",
    Calculation = "The earliest timestamp of all point locations associated with the cluster."
  ),
  "`cease_dttm` and `cease_dttm_local`" = tibble(
    Description = "The 'ending' date-time of the cluster event, in UTC and local timezone, respectively",
    Calculation = "The latest timestamp of all point locations associated with the cluster."
  ),
  "`centroid`" = tibble(
    Description = "A `POINT` geometry providing the coordinates of the spatial median of the cluster",
    Calculation = "Apply the Weiszfeld algorithm ([`Gmedian::Weiszfeld`](https://rdrr.io/cran/Gmedian/man/Gmedian.html)) to all location points associated with the cluster"
  ),
  "`members_n`" = tibble(
    Description = "Number of tracks containing location points affiliated with the cluster event at any point of its lifespan",
    Calculation = "Length of unique track IDs in the cluster"
  ),
  "`members_ids`" = tibble(
    Description = "List of track IDs associated with the cluster event during its lifespan",
    Calculation = ""
  ),
  "`timespan`" = tibble(
    Description = "Total duration of the cluster event (unit: decimal days)",
    Calculation = "The difference between `cease_dttm` and `spawn_dttm`"
  ),
    "`timespan_ndays`" = tibble(
    Description = "Total number of integer days covered by the cluster event, including days without visiting tracks",
    Calculation = "The length of the sequence between the date components of `cease_dttm_local` and `spawn_dttm_local`"
  ),
  "`days_active_n`" = tibble(
    Description = "Number of days the cluster was active, i.e. visited by at least one track during the day",
    Calculation = "Length of unique dates of point locations affiliated to the cluster event"
  ),
  "`days_inactive_n`" = tibble(
    Description = "Number of days the cluster was inactive, i.e. no track visited during the day",
    Calculation = "The difference between `timespan_ndays` and `days_active_n`"
  ),
    "`pts_n`" = tibble(
    Description = "The total number of location points comprised by the cluster",
    Calculation = "Count number of points in cluster across associated tracks"
  ),
    "`pts_locs`" = tibble(
    Description = "Nested data frame with longitude-latitude coordinates and timestamps of the points forming the cluster",
    Calculation = ""
  ),
  "`pts_pairdist_mean`, `pts_pairdist_med` and `pts_pairdist_sd`" = tibble(
    Description = "Respectively, the mean, median and standard deviation of pairwise distances between location points comprised by the cluster (unit: meters)",
    Calculation = "Summary statistics applied to all points within the cluster"
  ),
  "`pts_spread_area`" = tibble(
    Description = "The spread area of location points comprised by the cluster (units: m^2)",
    Calculation = "The area of the polygon created from the convex hull of points in the cluster (calculated via [`sf::st_convex_hull`](https://r-spatial.github.io/sf/reference/geos_unary.html))."
  ),
    "`hour_local_avg`" = tibble(
    Description = "The average local hour of track visits throughout the cluster event",
    Calculation = "The mean of `hour_local_med` across affiliated tracks"
  ),
    "`attnd_cmpd`" = tibble(
    Description = "The compounded time spent by member tracks in the cluster (units: hours)",#
    Calculation = "Sum of `attnd` across member tracks"
  ),
  "`attnd_davg`" = tibble(
    Description = "The daily average attendance time spent by member tracks at the cluster (unit: hours)",
    Calculation = "The average of `attnd_dmean` across affiliated tracks"
  ),
  "`attnd_daytime_davg`" = tibble(
    Description = "The daily average attendance time spent by member tracks in the cluster during the daytime period (unit: hours)",
    Calculation = "The average of `attnd_daytime_dmean` across member tracks"
  ),
  "`attnd_<behaviour-category>_cmpd` [e.g. `attnd_SFeeding_cmpd`, `attnd_SResting_cmpd`, `attnd_SRoosting_cmpd`]" = tibble(
    Description = "The compounded time spent by visiting tracks in each each behavioural category during the cluster event",
    Calculation = "The sum `attnd_<behaviour-category>` (e.g. `attnd_SFeeding`) across member tracks"
  ),
  "`visits_day_avg`" = tibble(
    Description = "The average number of unique visits per day by member tracks",
    Calculation = "The average `visits_day_mean` across member tracks"
  ),
    "`visit_drtn_avg`" = tibble(
    Description = "The average visit duration of member tracks to the cluster (units: hours)",
    Calculation = "The average `visit_drtn_mean` across member tracks"
  ),
  "`nightpts_dist_davg`" = tibble(
    Description = "The daily average distance between member tracks' night-point locations and the cluster centroid (unit: meters)",
    Calculation = "The average `nightpts_dist_dmean` across member tracks"
  ),
  "`nightpts_250m_avgprop` and `nightpts_1km_avgprop`" = tibble(
    Description = "Average proportion of member track's night-point locations within, respectively, 250m and 1km from the cluster centroid, on a daily basis",
    Calculation = "The averages of `nightpts_250m_prop` and `nightpts_1km_prop` across member tracks"
  ),
  "`arrival_dist_avg`" = tibble(
    Description = "The average distance between member tracks' night-points and the cluster centroid on the date of arrival (i.e. first visit; unit: meters)",
    Calculation = "The average of `arrival_dist_mean` across affiliated tracks"
  ),
  "`members_centroid_pairdist_mean`, `members_centroid_pairdist_med` and `members_centroid_pairdist_sd`" = tibble(
    Description = "Respectively, the mean, median and standard deviation of pairwise distances between track-level centroids of location points in the cluster (unit: meters)",
    Calculation = "Summary statistics applied to `median_point`s within the cluster"
  ),
  "`nonmembers_dist_min`" = tibble(
    Description = "The minimum distance between a **non-member** location point and the cluster centroid, during the 2 weeks leading up to and throughout the cluster event (unit: meters)",
    Calculation = "Find the closest distance from non-member location points to the cluster centroid occurring between `spawn_dttm - lubridate::days(14)` and `cease_dttm`"
  ),
  "`nonmembers_within_25km_n` and `nonmembers_within_50km_n`" = tibble(
    Description = "Number of non-member tracks with location points within, respectively, 25km and 50km from the cluster centroid, during the 2 weeks leading up to and throughout the cluster event",
    Calculation = "Count the non-member track IDs that have any locations within 25km and 50km of the cluster centroid between 14 days before `spawn_dttm` and `cease_dttm`"
  )
)


write_rds(clust_details, "doc/clust_details.rds")

```


```{r}
#| echo: false

list_rbind(clust_details, names_to = "Attribute Name") |> 
  knitr::kable(digits = 1) 
  #kableExtra::kable_styling(font_size = 7)
```




```{r}
#| include: false
#| echo: false

# cross-checking if output colnames match those in output description table
clust_details_names <- names(clust_details) |> 
  stringr::str_remove_all("`") |> 
  stringr::str_remove("attnd_<behaviour-category>_cmpd \\[e.g. ") |>
  stringr::str_remove("\\]") |> 
  stringr::str_split(" and |, ") |> 
  as_vector()
  
symdiff(clust_tbl_names, clust_details_names)

```